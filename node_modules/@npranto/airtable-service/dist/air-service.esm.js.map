{"version":3,"file":"air-service.esm.js","sources":["../index.js"],"sourcesContent":["/**\n * @module AirtableService\n * @description Provides functions to interact with Airtable API.\n */\n\nimport axios from \"axios\";\nimport pkgJSON from \"./package.json\";\n\nconst validateData = (data, validator) => {\n  if (!validator || typeof validator !== \"func\") {\n    return {\n      isValid: true,\n      error: null,\n    };\n  }\n\n  const validatorOutput = validator(data) || {};\n  const validatorOutputKeys = Object.keys(validatorOutput);\n  if (\n    !validatorOutputKeys ||\n    !validatorOutputKeys.length ||\n    !validatorOutputKeys.includes(\"isValid\") ||\n    !validatorOutputKeys.includes(\"error\")\n  ) {\n    throw new Error(\n      \"`validator` function must return an object with `isValid` and `error` properties\"\n    );\n  }\n\n  return {\n    isValid: validatorOutput.isValid,\n    error: validatorOutput.error,\n  };\n};\n\n/**\n * Logs the current version of the Airtable service.\n * @function\n */\nfunction airServiceLog() {\n  console.log(`Airtable Service - v${pkgJSON.version}`);\n}\n\n/**\n * Retrieves all records from a specific table in Airtable\n * @async\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve records from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Array>} - Promise that resolves to an array of records\n * @throws {Error} - Throws an error if unable to retrieve records from Airtable\n */\nasync function getAllRecords(config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n  const response = await axios.get(url, {\n    headers: {\n      Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n    },\n  });\n  if (response.status === 200) {\n    return response.data.records;\n  } else {\n    throw new Error(\"Unable to get records from Airtable\");\n  }\n}\n\n/**\n * Retrieves a specific record from an Airtable table by its ID\n * @async\n * @param {string} recordId - ID of the record to retrieve\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the retrieved record or null if not found\n * @throws {Error} - Throws an error if unable to retrieve the record from Airtable\n */\nasync function getRecordById(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to get record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates a new record in an Airtable table with the specified data\n * @async\n * @param {Object} data - Data for the new record to be created\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to create the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object>} - Promise that resolves to the newly created record\n * @throws {Error} - Throws an error if unable to create the record in Airtable\n */\nasync function createRecord(data, validator, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n\n  const { isValid, error } = validateData(data, validator);\n\n  if (!isValid) {\n    throw new Error(error || \"Please pass in valid data to create a record\");\n  }\n\n  try {\n    const response = await axios.post(\n      url,\n      {\n        records: Array.isArray(data) ? [...data] : [data],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    throw new Error(\"Unable to create record in Airtable\");\n  }\n}\n\n/**\n * Updates a record in an Airtable table with the specified ID and data\n * @async\n * @param {string} recordId - ID of the record to update\n * @param {Object} data - New data for the record to be updated\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to update the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the updated record or null if not found\n * @throws {Error} - Throws an error if unable to update the record in Airtable\n */\nasync function updateRecord(recordId, data, validator, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n\n  const { isValid, error } = validateData(data, validator);\n\n  if (!isValid) {\n    throw new Error(error || \"Please pass in valid data to create a record\");\n  }\n\n  try {\n    const response = await axios.patch(url, data, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to update record in Airtable\");\n    }\n  }\n}\n\n/**\n * Deletes a record from an Airtable table with the specified ID\n * @async\n * @param {string} recordId - ID of the record to delete\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to delete the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<string|null>} - Promise that resolves to the deleted record ID or null if not found\n * @throws {Error} - Throws an error if unable to delete the record from Airtable\n */\nasync function deleteRecord(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.delete(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return recordId;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to delete record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates an instance of the AirtableService.\n * @param {Object} options - An object that contains the configuration for the AirtableService.\n * @param {string} options.AIRTABLE_API_KEY - The API key for the Airtable account.\n * @param {string} options.AIRTABLE_BASE_ID - The ID of the Airtable base.\n * @param {string} options.AIRTABLE_TABLE_NAME - The name of the table in the Airtable base.\n * @returns {AirtableService} An instance of the AirtableService.\n */\nexport function AirtableService({\n  AIRTABLE_API_KEY,\n  AIRTABLE_BASE_ID,\n  AIRTABLE_TABLE_NAME,\n}) {\n  const config = {\n    AIRTABLE_API_KEY,\n    AIRTABLE_BASE_ID,\n    AIRTABLE_TABLE_NAME,\n  };\n  return {\n    airServiceLog: () => airServiceLog(),\n    getAllRecords: () => getAllRecords(config),\n    getRecordById: (recordId) => getRecordById(recordId, config),\n    createRecord: (data, validator) => createRecord(data, validator, config),\n    updateRecord: (recordId, data, validator) =>\n      updateRecord(recordId, data, validator, config),\n    deleteRecord: (recordId) => deleteRecord(recordId, config),\n  };\n}\n"],"names":["_catch","body","recover","result","e","then","validateData","data","validator","isValid","error","validatorOutput","validatorOutputKeys","Object","keys","length","includes","Error","AirtableService","_ref","config","AIRTABLE_API_KEY","AIRTABLE_BASE_ID","AIRTABLE_TABLE_NAME","airServiceLog","console","log","pkgJSON","getAllRecords","url","Promise","resolve","axios","get","headers","Authorization","response","status","records","reject","getRecordById","recordId","createRecord","_validateData","post","Array","isArray","concat","updateRecord","_validateData2","patch","deleteRecord"],"mappings":"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"}