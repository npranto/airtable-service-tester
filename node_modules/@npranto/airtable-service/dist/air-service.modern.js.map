{"version":3,"file":"air-service.modern.js","sources":["../index.js"],"sourcesContent":["/**\n * @module AirtableService\n * @description Provides functions to interact with Airtable API.\n */\n\nimport axios from \"axios\";\nimport pkgJSON from \"./package.json\";\n\nconst validateData = (data, validator) => {\n  if (!validator || typeof validator !== \"func\") {\n    return {\n      isValid: true,\n      error: null,\n    };\n  }\n\n  const validatorOutput = validator(data) || {};\n  const validatorOutputKeys = Object.keys(validatorOutput);\n  if (\n    !validatorOutputKeys ||\n    !validatorOutputKeys.length ||\n    !validatorOutputKeys.includes(\"isValid\") ||\n    !validatorOutputKeys.includes(\"error\")\n  ) {\n    throw new Error(\n      \"`validator` function must return an object with `isValid` and `error` properties\"\n    );\n  }\n\n  return {\n    isValid: validatorOutput.isValid,\n    error: validatorOutput.error,\n  };\n};\n\n/**\n * Logs the current version of the Airtable service.\n * @function\n */\nfunction airServiceLog() {\n  console.log(`Airtable Service - v${pkgJSON.version}`);\n}\n\n/**\n * Retrieves all records from a specific table in Airtable\n * @async\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve records from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Array>} - Promise that resolves to an array of records\n * @throws {Error} - Throws an error if unable to retrieve records from Airtable\n */\nasync function getAllRecords(config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n  const response = await axios.get(url, {\n    headers: {\n      Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n    },\n  });\n  if (response.status === 200) {\n    return response.data.records;\n  } else {\n    throw new Error(\"Unable to get records from Airtable\");\n  }\n}\n\n/**\n * Retrieves a specific record from an Airtable table by its ID\n * @async\n * @param {string} recordId - ID of the record to retrieve\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to retrieve the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the retrieved record or null if not found\n * @throws {Error} - Throws an error if unable to retrieve the record from Airtable\n */\nasync function getRecordById(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to get record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates a new record in an Airtable table with the specified data\n * @async\n * @param {Object} data - Data for the new record to be created\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to create the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object>} - Promise that resolves to the newly created record\n * @throws {Error} - Throws an error if unable to create the record in Airtable\n */\nasync function createRecord(data, validator, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}`;\n  console.log(\"url: \", url);\n\n  const { isValid, error } = validateData(data, validator);\n\n  if (!isValid) {\n    throw new Error(error || \"Please pass in valid data to create a record\");\n  }\n\n  try {\n    const response = await axios.post(\n      url,\n      {\n        records: Array.isArray(data) ? [...data] : [data],\n      },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n        },\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    throw new Error(\"Unable to create record in Airtable\");\n  }\n}\n\n/**\n * Updates a record in an Airtable table with the specified ID and data\n * @async\n * @param {string} recordId - ID of the record to update\n * @param {Object} data - New data for the record to be updated\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to update the record in\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<Object|null>} - Promise that resolves to the updated record or null if not found\n * @throws {Error} - Throws an error if unable to update the record in Airtable\n */\nasync function updateRecord(recordId, data, validator, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n\n  const { isValid, error } = validateData(data, validator);\n\n  if (!isValid) {\n    throw new Error(error || \"Please pass in valid data to create a record\");\n  }\n\n  try {\n    const response = await axios.patch(url, data, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to update record in Airtable\");\n    }\n  }\n}\n\n/**\n * Deletes a record from an Airtable table with the specified ID\n * @async\n * @param {string} recordId - ID of the record to delete\n * @param {Object} config - Configuration object with Airtable credentials\n * @param {string} config.AIRTABLE_BASE_ID - Airtable Base ID\n * @param {string} config.AIRTABLE_TABLE_NAME - Name of the Airtable table to delete the record from\n * @param {string} config.AIRTABLE_API_KEY - Airtable API Key\n * @returns {Promise<string|null>} - Promise that resolves to the deleted record ID or null if not found\n * @throws {Error} - Throws an error if unable to delete the record from Airtable\n */\nasync function deleteRecord(recordId, config) {\n  const url = `https://api.airtable.com/v0/${config.AIRTABLE_BASE_ID}/${config.AIRTABLE_TABLE_NAME}/${recordId}`;\n  console.log(\"url: \", url);\n  try {\n    const response = await axios.delete(url, {\n      headers: {\n        Authorization: `Bearer ${config.AIRTABLE_API_KEY}`,\n      },\n    });\n    return recordId;\n  } catch (error) {\n    if (error.response.status === 404) {\n      return null;\n    } else {\n      throw new Error(\"Unable to delete record from Airtable\");\n    }\n  }\n}\n\n/**\n * Creates an instance of the AirtableService.\n * @param {Object} options - An object that contains the configuration for the AirtableService.\n * @param {string} options.AIRTABLE_API_KEY - The API key for the Airtable account.\n * @param {string} options.AIRTABLE_BASE_ID - The ID of the Airtable base.\n * @param {string} options.AIRTABLE_TABLE_NAME - The name of the table in the Airtable base.\n * @returns {AirtableService} An instance of the AirtableService.\n */\nexport function AirtableService({\n  AIRTABLE_API_KEY,\n  AIRTABLE_BASE_ID,\n  AIRTABLE_TABLE_NAME,\n}) {\n  const config = {\n    AIRTABLE_API_KEY,\n    AIRTABLE_BASE_ID,\n    AIRTABLE_TABLE_NAME,\n  };\n  return {\n    airServiceLog: () => airServiceLog(),\n    getAllRecords: () => getAllRecords(config),\n    getRecordById: (recordId) => getRecordById(recordId, config),\n    createRecord: (data, validator) => createRecord(data, validator, config),\n    updateRecord: (recordId, data, validator) =>\n      updateRecord(recordId, data, validator, config),\n    deleteRecord: (recordId) => deleteRecord(recordId, config),\n  };\n}\n"],"names":["validateData","data","validator","isValid","error","validatorOutput","validatorOutputKeys","Object","keys","length","includes","Error","AirtableService","AIRTABLE_API_KEY","AIRTABLE_BASE_ID","AIRTABLE_TABLE_NAME","config","airServiceLog","console","log","getAllRecords","async","url","response","axios","get","headers","Authorization","status","records","getRecordById","recordId","createRecord","post","Array","isArray","updateRecord","patch","deleteRecord","delete"],"mappings":"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"}